import { Request, Response } from "express";
import { Movie } from "../models/movie.model";
import { Category } from "../models/category.model";
import Joi from "joi";

// üìå Esquema de validaci√≥n con Joi
const movieSchema = Joi.object({
  title: Joi.string().required(),
  description: Joi.string().required(),
  categoryId: Joi.number().integer().required(),
});

// üìå Crear una nueva pel√≠cula
export const createMovie = async (req: Request, res: Response): Promise<void> => {
  try {
    const { error } = movieSchema.validate({title: req.body.title, description: req.body.description, categoryId: req.body.categoryId});
    if (error) {
      res.status(400).json({ error: error.details[0].message });
      return;
    }

    const movie = await Movie.create(req.body);
    res.status(201).json({ message: "üé¨ Pel√≠cula creada exitosamente", movie });
  } catch (error) {
    res.status(500).json({ error: "‚ùå Error al crear la pel√≠cula" });
  }
};

// üìå Obtener todas las pel√≠culas con paginaci√≥n y filtrado
export const getMovies = async (req: Request, res: Response): Promise<void> => {
  try {
    // Usar el alias "category" en el include
    const movies = await Movie.findAll({
      include: [{ model: Category, as: "category" }], // Especificar el alias aqu√≠
    });

    res.json(movies);
  } catch (error) {
    console.error(error); // Para depurar el error en la consola
    res.status(500).json({ error: "‚ùå Error al obtener las pel√≠culas" });
  }
};

// üìå Obtener una pel√≠cula por ID
export const getMovieById = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;

    // Usar el alias "category" en el include
    const movie = await Movie.findByPk(id, {
      include: [{ model: Category, as: "category" }], // Especificar el alias aqu√≠
    });

    if (!movie) {
      res.status(404).json({ error: "‚ùå Pel√≠cula no encontrada" });
      return;
    }

    res.json(movie);
  } catch (error) {
    console.error(error); // Para depurar el error en la consola
    res.status(500).json({ error: "‚ùå Error al obtener la pel√≠cula" });
  }
};

// üìå Actualizar una pel√≠cula
export const updateMovie = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { error } = movieSchema.validate({title: req.body.title, description: req.body.description, categoryId: req.body.categoryId});
    if (error) {
      res.status(400).json({ error: error.details[0].message });
      return;
    }

    const movie = await Movie.findByPk(id);
    if (!movie) {
      res.status(404).json({ error: "‚ùå Pel√≠cula no encontrada" });
      return;
    }

    await movie.update(req.body);
    res.json({ message: "‚úÖ Pel√≠cula actualizada", movie });
  } catch (error) {
    res.status(500).json({ error: "‚ùå Error al actualizar la pel√≠cula" });
  }
};

// üìå Eliminar una pel√≠cula
export const deleteMovie = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const movie = await Movie.findByPk(id);

    if (!movie) {
      res.status(404).json({ error: "‚ùå Pel√≠cula no encontrada" });
      return;
    }

    await movie.destroy();
    res.json({ message: "üóë Pel√≠cula eliminada exitosamente" });
  } catch (error) {
    res.status(500).json({ error: "‚ùå Error al eliminar la pel√≠cula" });
  }
};
